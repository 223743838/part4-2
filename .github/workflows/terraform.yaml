# 
# GitHub Actions workflow.
#
# Automatically deploys the python microservice to Kubernetes on push to any branch. 
# For real use you might want to restrict this to the "prod" branch.
#

name: Terraform integration

on:
  #
  # Allows deployment to be invoked manually through the GitHub Actions user interface.
  #
  workflow_dispatch: 

jobs:

  deploy:
    runs-on: ubuntu-latest

    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v3

      # Azure login using Service Principal credentials from GitHub Secrets
      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: scripts/terraform

      - name: Terraform Plan
        run: terraform plan -var="app_name=${{ secrets.APP_NAME }}" -var="kubernetes_version=${{ secrets.KUBERNETES_VERSION }}" -var="subscription_id=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" -var="client_id=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" -var="client_secret=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" -var="tenant_id=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}"
        working-directory: scripts/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="app_name=${{ secrets.APP_NAME }}" -var="kubernetes_version=${{ secrets.KUBERNETES_VERSION }}" -var="subscription_id=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" -var="client_id=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" -var="client_secret=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" -var="tenant_id=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}"
        working-directory: scripts/terraform